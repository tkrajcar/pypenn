Index: src/Makefile.in
===================================================================
--- src/Makefile.in	(revision 6)
+++ src/Makefile.in	(working copy)
@@ -192,7 +192,7 @@
 # PennPy dependencies. --CU5
 # Cheat a bit by recompiling whenever we recompile flaglocal.o/funlocal.o.
 pennpy.o: flaglocal.o funlocal.o ../hdrs/pennpy.h ../hdrs/log.h
-bsd.o flags.o function.o game.o: ../hdrs/pennpy.h
+bsd.o flags.o function.o game.o timer.o: ../hdrs/pennpy.h
 
 # DO NOT DELETE THIS LINE -- make depend depends on it.
 
Index: src/pennpy.c
===================================================================
--- src/pennpy.c	(revision 6)
+++ src/pennpy.c	(working copy)
@@ -15,6 +15,18 @@
 #include "pennpy.h"
 
 /*
+ * Configuration constants.
+ */
+#define MAIN_PY "python/main.py"
+
+/*
+ * Forward declarations.
+ */
+static PyObject *cu5_pennpy_resolve(char *dotted_name);
+static int cu5_pennpy_bless_module(PyObject *module_obj);
+static int cu5_pennpy_set_timer(PyObject *hook_obj);
+
+/*
  * Python to PennMUSH.
  */
 
@@ -25,21 +37,71 @@
 /* Reference to __main__.  Only usable when the interpreter is initialized. */
 static PyObject *cu5_pennpy_main = NULL;
 
-PennPy_METHOD(cu5_pennpy_example)
+PennPy_METHOD(cu5_pennpy_meth_bless)
 {
-	const char *arg0_ptr;
-	Py_ssize_t arg0_len;
+	static int frozen = 0;
 
-	if (!PyArg_ParseTuple(args, "s#", &arg0_ptr, &arg0_len)) {
+	PyObject *module_obj;
+
+	if (!PyArg_ParseTuple(args, "O", &module_obj)) {
 		/* Threw an exception. */
 		return NULL;
 	}
 
-	return PyInt_FromSsize_t(arg0_len);
+	if (module_obj == Py_None) {
+		/* Freeze blessing state. */
+		frozen = 1;
+		Py_RETURN_NONE;
+	}
+
+	if (!PyModule_Check(module_obj)) {
+		/* Not a module, raise a TypeError. */
+		PyErr_SetString(PyExc_TypeError, "Can only bless modules");
+		return NULL;
+	}
+
+	if (frozen) {
+		/* Only accept None after freezing. */
+		PyErr_SetString(PyExc_ValueError, "Blessings frozen");
+		return NULL;
+	}
+
+	if (!cu5_pennpy_bless_module(module_obj)) {
+		/* Internal error, propagate exception. */
+		return NULL;
+	}
+
+	Py_RETURN_NONE;
 }
 
-PennPy_METHOD(cu5_pennpy_notify)
+PennPy_METHOD(cu5_pennpy_meth_set_timer)
 {
+	PyObject *hook_obj;
+
+	if (!PyArg_ParseTuple(args, "O", &hook_obj)) {
+		/* Threw an exception. */
+		return NULL;
+	}
+
+	if (hook_obj == Py_None) {
+		/* Clear the timer hook. */
+		hook_obj = NULL;
+	} else if (!PyCallable_Check(hook_obj)) {
+		/* Not callable, raise a TypeError. */
+		PyErr_SetString(PyExc_TypeError, "Not callable");
+		return NULL;
+	}
+
+	if (!cu5_pennpy_set_timer(hook_obj)) {
+		/* Internal error, propagate exception. */
+		return NULL;
+	}
+
+	Py_RETURN_NONE;
+}
+
+PennPy_METHOD(cu5_pennpy_meth_notify)
+{
 	PyObject *targets_obj, *targets_iter, *next_obj;
 	const char *message;
 
@@ -65,7 +127,9 @@
 			break;
 		}
 
-		notify(target, message);
+		if (GoodObject(target) && !IsGarbage(target)) {
+			notify(target, message);
+		}
 	}
 
 	Py_DECREF(targets_iter);
@@ -81,15 +145,23 @@
 
 static PyMethodDef cu5_pennpy_module[] = {
 	{
-		"example", cu5_pennpy_example, METH_VARARGS,
-		"example(arg): Equivalent to len(arg)"
+		"bless", cu5_pennpy_meth_bless, METH_VARARGS,
+		"bless(module)\n"
+		"Make module accessible to PyCall(). bless(None) prevents further blessing."
 	},
 
 	{
-		"notify", cu5_pennpy_notify, METH_VARARGS,
-		"notify(target,message): notify target iterable of message"
+		"set_timer", cu5_pennpy_meth_set_timer, METH_VARARGS,
+		"set_timer(callable)\n"
+		"Set timer hook to the passed callable. set_timer(None) clears the timer hook."
 	},
 
+	{
+		"notify", cu5_pennpy_meth_notify, METH_VARARGS,
+		"notify(target, message)\n"
+		"Notify the iterable, target, of message."
+	},
+
 	{ NULL, NULL, 0, NULL }
 };
 
@@ -97,18 +169,46 @@
  * PennMUSH to Python.
  */
 
+static int cu5_pennpy_enabled = 0;
+
 static void
 cu5_pennpy_exception(char *buff, char **bp)
 {
-	/* Dump the stack to stderr and clear the error indicator. */
-	do_rawlog(LT_ERR, "PennPy: Python exception:");
-	PyErr_Print();
+	const char *ex_name;
+	PyObject *ex_type;
 
 	/*
 	 * Report exception.  We don't return specifics; if you need them,
 	 * handle that in the Python code and return a string.
 	 */
-	safe_str(T("#-1 PYTHON EXCEPTION"), buff, bp);
+	ex_name = "PYTHON"; /* catch-all exception "name" */
+
+	ex_type = PyErr_Occurred();
+	if (PyExceptionClass_Check(ex_type)) {
+		/* Exception type is a valid exception class. */
+		ex_name = PyExceptionClass_Name(ex_type);
+		if (ex_name) {
+			/* Exception class has a name. */
+			char *ex_short_name = strrchr(ex_name, '.');
+			if (ex_short_name) {
+				/* blah.blah.ExceptionName */
+				ex_name = ex_short_name + 1;
+			}
+		} else {
+			/* Shouldn't happen, but extra cautious. */
+		}
+	} else {
+		/*
+		 * This must be an old-style string exception, but those are
+		 * deprecated and now too rare for us to bother identifying.
+		 */
+	}
+
+	safe_format(buff, bp, T("#-1 %s EXCEPTION"), ex_name);
+
+	/* Dump the stack to stderr and clear the error indicator. */
+	do_rawlog(LT_ERR, "PennPy: Python exception:");
+	PyErr_Print();
 }
 
 static PyObject *
@@ -140,7 +240,7 @@
 				PyTuple_SET_ITEM(args_obj, ii, Py_None);
 			}
 
-			/* Free tuple. */
+			/* Free tuple.  TODO: Doesn't throw exceptions, yes? */
 			Py_DECREF(args_obj);
 			return NULL;
 		}
@@ -151,28 +251,28 @@
 	return args_obj;
 }
 
-FUNCTION(cu5_pennpy_fun_pyeval)
+static int
+cu5_pennpy_unparse(PyObject *value, char *buff, char **bp)
 {
-	PyObject *result;
+	char *value_str;
 
-	assert(nargs == 1);
-
-	/* Check for PyEval permission. */
-	if (!has_power_by_name(executor, "PyEval", NOTYPE)) {
-		safe_str(T(e_perm), buff, bp);
-		return;
+	if (value == Py_None) {
+		/* No value. */
+	} else if (!(value_str = PyString_AsString(value))) {
+		/* Not a string. */
+		PyErr_Clear();
+		return 0;
+	} else {
+		/* String. */
+		safe_str(value_str, buff, bp);
 	}
 
-	/* Evalute string. */
-	/* FIXME: Return exception info. */
-
-	/* Return result as a string. */
+	return 1;
 }
 
 FUNCTION(cu5_pennpy_fun_pycall)
 {
 	PyObject *result, *call_obj, *args_obj;
-	char *result_str;
 
 	assert(nargs > 0);
 
@@ -182,8 +282,14 @@
 		return;
 	}
 
+	if (!cu5_pennpy_enabled) {
+		/* PennPy disabled because of initialize failure. */
+		safe_str(T(e_disabled), buff, bp);
+		return;
+	}
+
 	/* Find function. */
-	if (!(call_obj = PyObject_GetAttrString(cu5_pennpy_main, args[0]))) {
+	if (!(call_obj = cu5_pennpy_resolve(args[0]))) {
 		PyErr_Clear();
 		safe_str(T(e_match), buff, bp);
 		return;
@@ -205,8 +311,8 @@
 
 	/* Call function with arguments. */
 	result = PyObject_CallObject(call_obj, args_obj);
+	Py_DECREF(args_obj);
 	Py_DECREF(call_obj);
-	Py_XDECREF(args_obj);
 
 	if (!result) {
 		/* Call threw exception. */
@@ -215,28 +321,234 @@
 	}
 
 	/* Return result as a string. */
-	if (result == Py_None) {
-		/* No return value. */
-	} else if (!(result_str = PyString_AsString(result))) {
-		/* Not a string. */
-		PyErr_Clear();
+	if (!cu5_pennpy_unparse(result, buff, bp)) {
 		safe_str(T("#-1 RETURN TYPE ERROR"), buff, bp);
-	} else {
-		/* String. */
-		safe_str(result_str, buff, bp);
 	}
 
 	Py_DECREF(result);
 }
 
+FUNCTION(cu5_pennpy_fun_pyeval)
+{
+	PyObject *result, *main_dict;
+
+	assert(nargs == 1);
+
+	/* Check for PyEval permission. */
+	if (!has_power_by_name(executor, "PyEval", NOTYPE)) {
+		safe_str(T(e_perm), buff, bp);
+		return;
+	}
+
+	if (!cu5_pennpy_enabled) {
+		/* PennPy disabled because of initialize failure. */
+		safe_str(T(e_disabled), buff, bp);
+		return;
+	}
+
+	/* Evalute string. */
+	main_dict = PyModule_GetDict(cu5_pennpy_main);
+	result = PyRun_String(args[0], Py_single_input, main_dict, main_dict);
+	if (!result) {
+		/* Evaluation threw exception. */
+		cu5_pennpy_exception(buff, bp);
+		return;
+	}
+
+	/* Return result as a string. */
+	if (!cu5_pennpy_unparse(result, buff, bp)) {
+		safe_str(T("#-1 RETURN TYPE ERROR"), buff, bp);
+	}
+
+	Py_DECREF(result);
+}
+
+FUNCTION(cu5_pennpy_fun_pyrun)
+{
+	PyObject *result, *main_dict;
+
+	assert(nargs == 1);
+
+	/* Check for PyEval permission. */
+	if (!has_power_by_name(executor, "PyEval", NOTYPE)) {
+		safe_str(T(e_perm), buff, bp);
+		return;
+	}
+
+	if (!cu5_pennpy_enabled) {
+		/* PennPy disabled because of initialize failure. */
+		safe_str(T(e_disabled), buff, bp);
+		return;
+	}
+
+	/* Evalute string. */
+	main_dict = PyModule_GetDict(cu5_pennpy_main);
+	result = PyRun_String(args[0], Py_single_input, main_dict, main_dict);
+	if (!result) {
+		/* Evaluation threw exception. */
+		cu5_pennpy_exception(buff, bp);
+		return;
+	}
+
+	/* Ignore result. */
+	Py_DECREF(result);
+}
+
 void
 cu5_pennpy_functions(void)
 {
-	function_add("PYEVAL", cu5_pennpy_fun_pyeval, 1, 1, FN_WIZARD);
-	function_add("PYCALL", cu5_pennpy_fun_pycall, 1, INT_MAX, FN_WIZARD);
+	function_add("PYCALL", cu5_pennpy_fun_pycall, 1, INT_MAX, FN_REG);
+	function_add("PYEVAL", cu5_pennpy_fun_pyeval, 1, 1, FN_REG);
+	function_add("PYRUN", cu5_pennpy_fun_pyrun, 1, 1, FN_REG);
 }
 
 /*
+ * Timer stuff.
+ */
+
+static PyObject *cu5_pennpy_timer_hook = NULL;
+
+static int
+cu5_pennpy_set_timer(PyObject *hook_obj)
+{
+	/* Remove old hook. */
+	Py_CLEAR(cu5_pennpy_timer_hook);
+
+	/* Set new hook. */
+	if (hook_obj) {
+		Py_INCREF(hook_obj);
+		cu5_pennpy_timer_hook = hook_obj;
+	}
+
+	return 1;
+}
+
+void
+cu5_pennpy_timer(void)
+{
+	PyObject *result;
+
+	if (!cu5_pennpy_enabled || !cu5_pennpy_timer_hook) {
+		/* No timer hook available. */
+		return;
+	}
+
+	/* Call timer hook. */
+	result = PyObject_CallObject(cu5_pennpy_timer_hook, NULL);
+	if (!result) {
+		do_rawlog(LT_ERR, "PennPy: Timer hook threw exception");
+		PyErr_Print();
+
+		/* Disable timer hook.  Annoying, so don't throw exceptions. */
+		cu5_pennpy_set_timer(NULL);
+		return;
+	}
+
+	/* Discard result. */
+	Py_DECREF(result);
+}
+
+/*
+ * Name resolution.
+ */
+
+typedef struct CU5_PennPy_Module CU5_PennPy_Module;
+struct CU5_PennPy_Module {
+	CU5_PennPy_Module *next;
+
+	PyObject *module_obj;
+};
+
+static CU5_PennPy_Module *cu5_pennpy_blessed = NULL;
+static CU5_PennPy_Module **cu5_pennpy_blessed_last = &cu5_pennpy_blessed;
+
+/* Note that dotted_name will remain the same, but must be modifiable. */
+static PyObject *
+cu5_pennpy_resolve(char *dotted_name)
+{
+	CU5_PennPy_Module *blessed;
+
+	PyObject *parent_obj;
+	PyObject *resolved_obj;
+
+	Py_INCREF(cu5_pennpy_main);
+	parent_obj = cu5_pennpy_main;
+
+	for (;;) {
+		char old_ch, *cp;
+
+		/* Truncate name component at . or NUL. */
+		for (cp = dotted_name; *cp != '\0' && *cp != '.'; cp++)
+			;
+
+		/* Resolve name. */
+		old_ch = *cp;
+		*cp = '\0';
+		resolved_obj = PyObject_GetAttrString(parent_obj, dotted_name);
+		*cp = old_ch;
+
+		Py_DECREF(parent_obj); /* only need pointer for identity */
+
+		if (!resolved_obj) {
+			/* Couldn't find it, propagate exception. */
+			return NULL;
+		}
+
+		/* Recurse to new object. */
+		if (old_ch == '\0') {
+			/* End of name. */
+			break;
+		}
+
+		dotted_name = cp + 1;
+		parent_obj = resolved_obj;
+	}
+
+	/*
+	 * Check blessing of parent_obj.  We can speed this by marking the
+	 * blessing on the module (but allows blessing to occur by accident),
+	 * or using a radix hash on the pointer.
+	 */
+	for (blessed = cu5_pennpy_blessed; blessed; blessed = blessed->next) {
+		if (blessed->module_obj == parent_obj) {
+			/* Go with my blessing. */
+			return resolved_obj;
+		}
+	}
+
+	Py_DECREF(resolved_obj);
+	PyErr_SetString(PyExc_TypeError, "Trying to access unblessed object");
+	return NULL;
+}
+
+static int
+cu5_pennpy_bless_module(PyObject *module_obj)
+{
+	CU5_PennPy_Module *new_blessed;
+
+	/* Create new blessing item. */
+	new_blessed = (CU5_PennPy_Module *)malloc(sizeof(CU5_PennPy_Module));
+	if (!new_blessed) {
+		PyErr_NoMemory();
+		return 0;
+	}
+
+	new_blessed->next = NULL;
+
+	Py_INCREF(module_obj);
+	new_blessed->module_obj = module_obj;
+
+	/*
+	 * Add blessing to the end of the list.  This implies that you'll want
+	 * to put more important modules first, so they get checked quicker.
+	 */
+	*cu5_pennpy_blessed_last = new_blessed;
+	cu5_pennpy_blessed_last = &new_blessed->next;
+
+	return 1;
+}
+
+/*
  * Startup/shutdown stuff.
  */
 
@@ -247,33 +559,37 @@
 
 	assert(cu5_pennpy_main == NULL);
 
-	do_rawlog(LT_ERR, T("Initializing PennPy"));
+	do_rawlog(LT_ERR, T("PennPy: Initializing"));
 
 	/* Initialize Python without installing signal handlers. */
 	Py_InitializeEx(0);
 
-	/* Export hooks as pennmush module. */
-	if (!Py_InitModule("pennmush", cu5_pennpy_module)) {
-		/* Can't initialize pennmush module. */
-		mush_panic(T("PennPy: Can't initialize pennmush module"));
+	/* Borrow a reference to __main__. */
+	if (!(cu5_pennpy_main = PyImport_AddModule("__main__"))) {
+		/* This shouldn't happen, but you never know. */
+		mush_panic(T("PennPy: Can't get reference to __main__"));
 	}
 
+	/* Export hooks as __pennmush__ module. */
+	if (!Py_InitModule("__pennmush__", cu5_pennpy_module)) {
+		/* Can't initialize __pennmush__ module. */
+		mush_panic(T("PennPy: Can't initialize __pennmush__ module"));
+	}
+
 	/* Execute game/python/main.py. */
-	if (!(main_py_fp = fopen("python/main.py", "r"))) {
+	if (!(main_py_fp = fopen(MAIN_PY, "r"))) {
 		/* Can't run main.py. */
-		mush_panic(T("PennPy: Can't open python/main.py"));
+		do_rawlog(LT_ERR, T("PennPy: Can't open %s"), MAIN_PY);
+		return;
 	}
 
-	if (PyRun_SimpleFile(main_py_fp, "python/main.py") != 0) {
+	if (PyRun_SimpleFile(main_py_fp, MAIN_PY) != 0) {
 		/* Something wrong with main.py. */
-		mush_panic(T("PennPy: Failed to execute python/main.py"));
+		do_rawlog(LT_ERR, T("PennPy: Failed to execute %s"), MAIN_PY);
+		return;
 	}
 
-	/* Borrow a reference to __main__. */
-	if (!(cu5_pennpy_main = PyImport_AddModule("__main__"))) {
-		/* This shouldn't happen, but you never know. */
-		mush_panic(T("PennPy: Can't get reference to __main__"));
-	}
+	cu5_pennpy_enabled = 1;
 }
 
 void
@@ -281,7 +597,7 @@
 {
 	assert(cu5_pennpy_main != NULL);
 
-	do_rawlog(LT_ERR, T("Finalizing PennPy"));
+	do_rawlog(LT_ERR, T("PennPy: Finalizing"));
 
 	/* Clean up (some) Python interpreter resources.  Not exhaustive. */
 	Py_Finalize();
Index: src/timer.c
===================================================================
--- src/timer.c	(revision 6)
+++ src/timer.c	(working copy)
@@ -44,7 +44,9 @@
 #include "attrib.h"
 #include "confmagic.h"
 
+#include "pennpy.h"
 
+
 static sig_atomic_t hup_triggered = 0;
 static sig_atomic_t usr1_triggered = 0;
 
@@ -271,6 +273,7 @@
     strcpy(global_eval_context.ccom, "");
   }
 
+  cu5_pennpy_timer();
   local_timer();
 }
 
Index: game/python/hidden.py
===================================================================
--- game/python/hidden.py	(revision 6)
+++ game/python/hidden.py	(working copy)
@@ -1,2 +1,11 @@
 def hidden():
 	return 'inaccessible!'
+
+# Try to bless ourselves real good.
+import pennmush
+import sys
+
+try:
+	pennmush.bless(sys.modules[__name__])
+except ValueError, ex:
+	pass
Index: game/python/pennmush.py
===================================================================
--- game/python/pennmush.py	(revision 6)
+++ game/python/pennmush.py	(working copy)
@@ -1 +1,4 @@
-# Stub module for testing PennPy code without PennMUSH.
+# Just import everything from the internal __pennmush__ module for now.
+from __pennmush__ import *
+
+# TODO: Stub module for testing PennPy code without PennMUSH.
Index: game/python/main.py
===================================================================
--- game/python/main.py	(revision 6)
+++ game/python/main.py	(working copy)
@@ -14,30 +14,17 @@
 
 del sys
 
-#
-# Some test code for now.
-#
+# Bless __main__, then prevent further blessing.
 import pennmush
 
-print "PennPy:", pennmush.example('hello world')
+import __main__
+pennmush.bless(__main__)
 
-try:
-	pennmush.example()
-except:
-	print "o noes"
+pennmush.bless(None)
 
-try:
-	pennmush.example("1", "2")
-except:
-	print "o noes 2"
-
-try:
-	pennmush.example(3)
-except:
-	print "o noes 3"
-
-print 'PennPy: pennmush.example[', pennmush.example.__doc__, ']'
-
+#
+# Some test code for now.
+#
 def smoosh_string(*args):
 	return ' '.join(args)
 
@@ -53,3 +40,16 @@
 	pennmush.notify(int_list, message)
 
 import hidden
+
+#
+# Test timer code.
+#
+import time
+
+def periodic():
+	print 'periodic() says: The current time is', time.asctime()
+	
+	# Test disable after exception.
+	raise AssertionError("I've been bad")
+
+pennmush.set_timer(periodic)

Property changes on: game
___________________________________________________________________
Modified: svn:ignore
   - mush.cnf
netmush
info_slave
alias.cnf
restrict.cnf
names.cnf

   + mush.cnf
netmush
info_slave
alias.cnf
restrict.cnf
names.cnf
netmush.pid


Index: hdrs/pennpy.h
===================================================================
--- hdrs/pennpy.h	(revision 6)
+++ hdrs/pennpy.h	(working copy)
@@ -7,5 +7,6 @@
 void cu5_pennpy_finalize(void);
 void cu5_pennpy_flags(FLAGSPACE *flags);
 void cu5_pennpy_functions(void);
+void cu5_pennpy_timer(void);
 
 #endif /* undef CU5_PENNPY_H */
